import logging
import asyncio
from telegram import Update
from telegram.ext import Application, CommandHandler, ContextTypes
from alerts_in_ua import AsyncClient as AsyncAlertsClient
import pytz
import datetime

# –¢–æ–∫–µ–Ω –≤–∞—à–æ–≥–æ Telegram –±–æ—Ç–∞
TELEGRAM_TOKEN = '–¢–í–û–ô –¢–ï–õ–ï–ì–†–ê–ú –¢–û–ö–ï–ù'

# –õ–æ–≥—É–≤–∞–Ω–Ω—è –¥–ª—è –±–æ—Ç–∞
logging.basicConfig(format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
                    level=logging.INFO)
logger = logging.getLogger(__name__)

# –°–ø–∏—Å–æ–∫ –∞–∫—Ç–∏–≤–Ω–∏—Ö –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤, —è–∫—ñ –ø—ñ–¥–ø–∏—Å–∞–ª–∏—Å—è –Ω–∞ —Å–ø–æ–≤—ñ—â–µ–Ω–Ω—è
subscribed_users = set()
last_alerts_regions = set()
ended_alerts = set()  # –°–ø–∏—Å–æ–∫ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—Ö —Ç—Ä–∏–≤–æ–≥

# –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—è –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ–≥–æ –∫–ª—ñ—î–Ω—Ç–∞ –¥–ª—è –æ—Ç—Ä–∏–º–∞–Ω–Ω—è —Ç—Ä–∏–≤–æ–≥
alerts_client = AsyncAlertsClient(token="0806e9f2a61d68b2cf84b10e06de4e3602bb9557ab2203")


# –û—Ç—Ä–∏–º–∞–Ω–Ω—è —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—ó –ø—Ä–æ —Ç—Ä–∏–≤–æ–≥–∏
async def get_alerts():
    try:
        # –û—Ç—Ä–∏–º—É—î–º–æ –∞–∫—Ç–∏–≤–Ω—ñ —Ç—Ä–∏–≤–æ–≥–∏
        active_alerts = await alerts_client.get_active_alerts()

        if active_alerts:
            logger.info(f"–ê–∫—Ç–∏–≤–Ω—ñ —Ç—Ä–∏–≤–æ–≥–∏: {active_alerts}")
            return active_alerts
        else:
            return []
    except Exception as e:
        logger.error(f"–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –æ—Ç—Ä–∏–º–∞–Ω–Ω—ñ –¥–∞–Ω–∏—Ö: {e}")
        return []


# –§–æ—Ä–º–∞—Ç—É–≤–∞–Ω–Ω—è —á–∞—Å—É –≤ –ö–∏—ó–≤—Å—å–∫—É –∑–æ–Ω—É
def format_kyiv_time(timestamp):
    if not timestamp:
        return "–ù–µ—ñ–∑–≤–µ—Å—Ç–Ω–æ"
    try:
        dt = datetime.datetime.fromisoformat(timestamp.replace('Z', '+00:00'))
        kyiv_tz = pytz.timezone('Europe/Kiev')
        local_time = dt.astimezone(kyiv_tz)
        return local_time.strftime("%d.%m.%Y %H:%M:%S")  # –±–µ–∑ –≤—Ä–µ–º–µ–Ω–Ω–æ–π –∑–æ–Ω—ã
    except Exception as e:
        logger.error(f"–ü–æ–º–∏–ª–∫–∞ —Ñ–æ—Ä–º–∞—Ç—É–≤–∞–Ω–Ω—è —á–∞—Å—É: {e}")
        return timestamp



# –°–ª–æ–≤–Ω–∏–∫ –¥–ª—è –≤—ñ–¥–æ–±—Ä–∞–∂–µ–Ω–Ω—è —Ç–∏–ø—ñ–≤ —Ç—Ä–∏–≤–æ–≥
alert_types = {
    "air_raid": "‚úàÔ∏è –ü–æ–≤—ñ—Ç—Ä—è–Ω–∞ —Ç—Ä–∏–≤–æ–≥–∞",
    "artillery_shelling": "üí• –û–±—Å—Ç—Ä—ñ–ª",
    "urban_fights": "‚öîÔ∏è –í—É–ª–∏—á–Ω—ñ –±–æ—ó"
}


# –ö–æ–º–∞–Ω–¥–∞ /start
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    user_id = update.message.chat_id
    subscribed_users.add(user_id)
    await update.message.reply_text(
        '–ü—Ä–∏–≤—ñ—Ç! –Ø –±–æ—Ç –¥–ª—è —Å–ø–æ–≤—ñ—â–µ–Ω—å –ø—Ä–æ —Ç—Ä–∏–≤–æ–≥–∏ –≤ –£–∫—Ä–∞—ó–Ω—ñ. –Ø –∞–≤—Ç–æ–º–∞—Ç–∏—á–Ω–æ –Ω–∞–¥—Å–∏–ª–∞—é –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –ø—Ä–∏ –Ω–æ–≤–∏—Ö —Ç—Ä–∏–≤–æ–≥–∞—Ö.')


# –ö–æ–º–∞–Ω–¥–∞ /alerts –¥–ª—è –æ—Ç—Ä–∏–º–∞–Ω–Ω—è —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—ó –ø—Ä–æ —Ç—Ä–∏–≤–æ–≥–∏
async def alerts(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    alerts_data = await get_alerts()
    if alerts_data:
        alert_message = "‚ö†Ô∏è –ê–ö–¢–ò–í–ù–Ü –¢–†–ò–í–û–ì–ò: ‚ö†Ô∏è\n\n"
        for alert in alerts_data:
            region_name = alert.location_title if hasattr(alert, 'location_title') else '–ù–µ–≤—ñ–¥–æ–º–∞ –æ–±–ª–∞—Å—Ç—å'
            started_at = format_kyiv_time(alert.started_at) if hasattr(alert, 'started_at') else '–ù–µ—ñ–∑–≤–µ—Å—Ç–Ω–æ'
            alert_type = alert.alert_type if hasattr(alert, 'alert_type') else '–ù–µ—ñ–∑–≤–µ—Å—Ç–∏–π —Ç–∏–ø'

            # –û—Ç—Ä–∏–º—É—î–º–æ —Ç–µ–∫—Å—Ç —Ç—Ä–∏–≤–æ–≥–∏ –∑—ñ —Å–ª–æ–≤–Ω–∏–∫–∞
            alert_text = alert_types.get(alert_type, "‚ùóÔ∏è –ù–µ–≤—ñ–¥–æ–º–∏–π —Ç–∏–ø —Ç—Ä–∏–≤–æ–≥–∏")

            alert_message += f"–û–±–ª–∞—Å—Ç—å: {region_name}\n"
            alert_message += f"–¢–∏–ø: {alert_text}\n"
            alert_message += f"–ü–æ—á–∞—Ç–æ–∫: {started_at}\n\n"

        await update.message.reply_text(alert_message)
    else:
        await update.message.reply_text("–ù–µ–º–∞—î –∞–∫—Ç–∏–≤–Ω–∏—Ö —Ç—Ä–∏–≤–æ–≥ –Ω–∞ –¥–∞–Ω–∏–π –º–æ–º–µ–Ω—Ç.")


# –§–æ–Ω–æ–≤–∏–π –ø—Ä–æ—Ü–µ—Å –º–æ–Ω—ñ—Ç–æ—Ä–∏–Ω–≥—É —Ç—Ä–∏–≤–æ–≥
async def monitor_alerts(application):
    global last_alerts_regions, ended_alerts  # –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î–º–æ –≥–ª–æ–±–∞–ª—å–Ω—ñ –∑–º—ñ–Ω–Ω—ñ –¥–ª—è –æ—Å—Ç–∞–Ω–Ω—å–æ–≥–æ —Å—Ç–∞–Ω—É —Ç—Ä–∏–≤–æ–≥
    while True:
        try:
            current_alerts = await get_alerts()
            current_alerts_regions = set()
            new_alerts = []
            ended_alerts_now = set()

            # –õ–æ–≥—É—î–º–æ –ø–æ—Ç–æ—á–Ω—ñ —Ç—Ä–∏–≤–æ–≥–∏ –¥–ª—è –≤—ñ–¥–ª–∞–¥–∫–∏
            logger.info(f"–ü–æ—Ç–æ—á–Ω—ñ —Ç—Ä–∏–≤–æ–≥–∏: {current_alerts}")

            # –û–±—Ä–æ–±–ª—è—î–º–æ –ø–æ—Ç–æ—á–Ω—ñ —Ç—Ä–∏–≤–æ–≥–∏
            for alert in current_alerts:
                region = alert.get('location_title', '')
                current_alerts_regions.add(region)

                # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ, —á–∏ —î —Ü—è —Ç—Ä–∏–≤–æ–≥–∞ –Ω–æ–≤–æ—é
                if region not in last_alerts_regions:
                    new_alerts.append(alert)

            # –õ–æ–≥—É—î–º–æ –Ω–æ–≤—ñ —Ç—Ä–∏–≤–æ–≥–∏ –¥–ª—è –≤—ñ–¥–ª–∞–¥–∫–∏
            logger.info(f"–ù–æ–≤—ñ —Ç—Ä–∏–≤–æ–≥–∏: {new_alerts}")

            # –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –Ω–∞ –∑–∞–≤–µ—Ä—à–µ–Ω—ñ —Ç—Ä–∏–≤–æ–≥–∏ (—Ç—Ä–∏–≤–æ–≥–∏, —è–∫–∏—Ö –≤–∂–µ –Ω–µ–º–∞—î)
            for alert in last_alerts_regions:
                if alert not in current_alerts_regions:
                    ended_alerts_now.add(alert)

            # –õ–æ–≥—É—î–º–æ –∑–∞–≤–µ—Ä—à–µ–Ω—ñ —Ç—Ä–∏–≤–æ–≥–∏
            logger.info(f"–ó–∞–≤–µ—Ä—à–µ–Ω—ñ —Ç—Ä–∏–≤–æ–≥–∏: {ended_alerts_now}")

            # –ù–∞–¥—Å–∏–ª–∞—î–º–æ —Å–ø–æ–≤—ñ—â–µ–Ω–Ω—è –ø—Ä–æ –Ω–æ–≤—ñ —Ç—Ä–∏–≤–æ–≥–∏
            if new_alerts and subscribed_users:
                alert_message = "‚ö†Ô∏è –ù–û–í–ê –¢–†–ò–í–û–ì–ê! ‚ö†Ô∏è\n\n"

                for alert in new_alerts:
                    region = alert.get('location_title', '–ù–µ–≤—ñ–¥–æ–º–∞ –æ–±–ª–∞—Å—Ç—å')
                    started_at = format_kyiv_time(alert.get('started_at'))
                    alert_type = alert.get('alert_type', '–ù–µ—ñ–∑–≤–µ—Å—Ç–Ω–∏–π —Ç–∏–ø')

                    # –û—Ç—Ä–∏–º—É—î–º–æ —Ç–µ–∫—Å—Ç —Ç—Ä–∏–≤–æ–≥–∏ –∑—ñ —Å–ª–æ–≤–Ω–∏–∫–∞
                    alert_text = alert_types.get(alert_type, "‚ùóÔ∏è –ù–µ–≤—ñ–¥–æ–º–∏–π —Ç–∏–ø —Ç—Ä–∏–≤–æ–≥–∏")

                    alert_message += f"–û–±–ª–∞—Å—Ç—å: {region}\n"
                    alert_message += f"–¢–∏–ø: {alert_text}\n"
                    alert_message += f"–ü–æ—á–∞—Ç–æ–∫: {started_at}\n\n"

                for user_id in subscribed_users:
                    try:
                        await application.bot.send_message(chat_id=user_id, text=alert_message)
                    except Exception as e:
                        logger.error(f"–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –Ω–∞–¥—Å–∏–ª–∞–Ω–Ω—ñ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è: {e}")

            # –ù–∞–¥—Å–∏–ª–∞—î–º–æ —Å–ø–æ–≤—ñ—â–µ–Ω–Ω—è –ø—Ä–æ –≤—ñ–¥–±—ñ–π
            if ended_alerts_now and subscribed_users:
                ended_alert_message = "‚úÖ –í–Ü–î–ë–Ü–ô –¢–†–ò–í–û–ì–ò! ‚úÖ\n\n"

                for alert in ended_alerts_now:
                    ended_alert_message += f"–û–±–ª–∞—Å—Ç—å: {alert}\n"
                    ended_alert_message += "–¢—Ä–∏–≤–æ–≥–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞.\n\n"

                for user_id in subscribed_users:
                    try:
                        await application.bot.send_message(chat_id=user_id, text=ended_alert_message)
                    except Exception as e:
                        logger.error(f"–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –Ω–∞–¥—Å–∏–ª–∞–Ω–Ω—ñ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è: {e}")

            # –û–Ω–æ–≤–ª—é—î–º–æ –ø–æ–ø–µ—Ä–µ–¥–Ω—ñ —Ç—Ä–∏–≤–æ–≥–∏
            last_alerts_regions = current_alerts_regions
            ended_alerts = ended_alerts_now
        except Exception as e:
            logger.error(f"–ü–æ–º–∏–ª–∫–∞ –≤ –º–æ–Ω—ñ—Ç–æ—Ä–∏–Ω–≥—É: {e}")

        # –ß–µ–∫–∞—î–º–æ 10 —Å–µ–∫—É–Ω–¥ –ø–µ—Ä–µ–¥ –Ω–∞—Å—Ç—É–ø–Ω–æ—é –ø–µ—Ä–µ–≤—ñ—Ä–∫–æ—é
        await asyncio.sleep(10)


async def main():
    # –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—è –¥–æ–¥–∞—Ç–∫—É
    application = Application.builder().token(TELEGRAM_TOKEN).build()

    # –î–æ–¥–∞—î–º–æ –æ–±—Ä–æ–±–Ω–∏–∫–∏ –∫–æ–º–∞–Ω–¥
    application.add_handler(CommandHandler("start", start))
    application.add_handler(CommandHandler("alerts", alerts))

    # –ó–∞–ø—É—Å–∫–∞—î–º–æ —Ñ–æ–Ω–æ–≤–∏–π –º–æ–Ω—ñ—Ç–æ—Ä–∏–Ω–≥
    asyncio.create_task(monitor_alerts(application))

    # –ó–∞–ø—É—Å–∫–∞—î–º–æ –±–æ—Ç–∞
    await application.run_polling()  # –ù–µ –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î–º–æ asyncio.run() —Ç—É—Ç


if __name__ == '__main__':
    # –ó–∞–ø—É—Å–∫–∞—î–º–æ main() –∑ –≤–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω–Ω—è–º async event loop
    import nest_asyncio
    nest_asyncio.apply()  # –ü–∞—Ç—á –¥–ª—è —Ä–æ–±–æ—Ç–∏ –∑ –≤–∂–µ –ø—Ä–∞—Ü—é—é—á–∏–º —Ü–∏–∫–ª–æ–º
    asyncio.run(main())
